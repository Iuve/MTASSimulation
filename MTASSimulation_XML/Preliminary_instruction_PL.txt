	Cały program można podzielić na części odpowiadające za różne aspekty wymagane przy symulacjach komputerowych, m.in. implementacja procesów i oddziaływań (,,fizyka''), definicja materiałów, geometria układu, sposób zapisu wyników itp. Na potrzeby projektu napisane od nowa zostały segmenty odpowiadające za wczytywanie i przechowywanie danych oraz tworzenie listy zadań wykonywanych przez program. W skrócie oznacza to przekazanie informacji o typie, pędzie, położeniu i liczbie cząstek jakie powinny być wygenerowane na podstawie danych wejściowych.
	
	MTAS Simulation podzielony jest na wiele plików składających się w całość. Stworzone od nowa zostały \textit{Decay, LoadDecayData, Nuclide, Level, Transition, Beta}, z czego każdy z nich jako plik źródłowy (rozszerzenie .cc) i biblioteka (.hh). Za przetworzenie danych z formatu ENSDF \cite{ensdf} do XML odpowiada \textit{CreateXML.cc}, również powstały w ramach projektu. Zmodyfikowana została też część z innych plików w taki sposób, by pasować do nowopowstałych elementów, a całość mogła korzystać z Geant4 w wersji 10.3 \cite{geant}.
	
	CreateXML tworzy zestaw plików XML odpowiadających za poszczególne nuklidy (przykłady w załączniku: \textit{50X120.xml, 51X120.xml, 51X119.xml}) oraz jeden wspólny \textit{Decay.xml} stanowiący instrukcję dla MTAS Simulation. Zawiera ona spis nazw nuklidów, które będą uwględnione w symulacji oraz informację o jądrowym poziomie początkowym i końcowym (gdzie symulacja ma się rozpocząć i zakończyć). Do rozpoczęcia symulacji potrzebne są wyżej wymienione pliki oraz podanie z terminalu liczby zdarzeń jakie mają być modelowane. Program na początku wczytuje do własnych klas \textit{(Nuclide, Level, Transition)} dane wejściowe w taki sposób, że dla każdego nuklidu tworzony jest element klasy \textit{Nuclide} zawierający informacje o liczbie atomowej, masowej i poziomach do niego należących. Każdy z poziomów reprezentowny jest przez element klasy \textit{Level}, w którym przechowywana jest jego energia, spin, parzystość, czas półtrwania i możliwe przejścia. Przejścia z kolei są zmiennymi z klasy \textit{Transition} i posiadają dane o typie, dostępnej energii, względnej intensywności (prawdopodobieństwie) przejścia i wskazują na kolejny poziom w sekwencji rozpadów. Dodatkowo dla przejść beta wyznaczany jest rozkład energii elektronów przy użyciu rozkładu Fermiego (pliki \textit{Beta} i \textit{FermiDistribution}). Za wczytywanie wymienionych parametrów odpowiedzialny jest \textit{LoadDecayData}.
	
	W \textit{Decay} wczytane dane wykorzystywane są do wygenerowania ścieżki rozpadu, od wcześniej ustalonego poziomu początkowego do poziomu końcowego lub do poziomu, który nie posiada dołączonych do siebie przejść (jest stabilny). Podczas pracy wykonywana jest odpowiednia liczba losowań potrzebna do tego celu. Przy użyciu struktury \textit{Event} tworzona jest lista wydarzeń, która następnie przekazywana jest do innych elementów programu, które odpowiadają za dalsze etapy symulacji. Każde stworzenie listy wydarzeń to jeden rozpad i czynność ta powtarzana jest zadaną wcześniej liczbę razy.
